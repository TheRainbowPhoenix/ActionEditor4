name: Build ModLoader

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    env:
      # Put vcpkg inside the repo workspace so paths are predictable
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg
      TRIPLET: x86-windows
      SRC_DIR: modloader
      BUILD_DIR: modloader/build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up MSVC developer command prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86

      - name: Ensure Ninja in PATH
        shell: pwsh
        run: |
          $ninja = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\Common7\IDE\CommonExtensions\Microsoft\CMake\Ninja\ninja.exe"
          if (Test-Path $ninja) { $env:Path = "$([System.IO.Path]::GetDirectoryName($ninja));$env:Path" }
          ninja --version

      - name: Bootstrap vcpkg (+ cache)
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.VCPKG_ROOT }}\installed
            ${{ env.VCPKG_ROOT }}\downloads
          key: vcpkg-${{ runner.os }}-${{ env.TRIPLET }}-minhook
      - name: Clone vcpkg
        shell: pwsh
        run: |
          if (!(Test-Path "${{ env.VCPKG_ROOT }}")) {
            git clone https://github.com/microsoft/vcpkg "${{ env.VCPKG_ROOT }}"
          }
      - name: Bootstrap vcpkg.exe
        shell: pwsh
        working-directory: ${{ env.VCPKG_ROOT }}
        run: .\bootstrap-vcpkg.bat

      - name: Install MinHook (x86)
        shell: pwsh
        working-directory: ${{ env.VCPKG_ROOT }}
        run: |
          .\vcpkg.exe integrate install
          .\vcpkg.exe install minhook:${{ env.TRIPLET }}

      - name: Configure (CMake + Ninja)
        shell: pwsh
        run: |
          cmake -S modloader -B build -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET=${{ env.TRIPLET }} `
            -DVCPKG_APPLOCAL_DEPS=OFF

      - name: Build
        shell: pwsh
        run: cmake --build build --config Release -v

      - name: Upload DLLs
        uses: actions/upload-artifact@v4
        with:
          name: modloader-x86-dlls
          path: |
            build\*.dll
            build\bin\Release\*.dll
            build\Release\*.dll
